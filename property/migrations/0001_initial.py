# Generated by Django 3.1 on 2021-02-27 07:37

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Property",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uid",
                    models.UUIDField(
                        auto_created=True, blank=True, null=True, unique=True
                    ),
                ),
                (
                    "listing_type",
                    models.CharField(
                        choices=[("T", "Top"), ("P", "Premium"), ("F", "Featured")],
                        max_length=1,
                    ),
                ),
                (
                    "membership_plan",
                    models.CharField(
                        choices=[("S", "Silver"), ("G", "Gold"), ("P", "Platinum")],
                        max_length=1,
                    ),
                ),
                (
                    "development_progress_status",
                    models.CharField(
                        choices=[
                            ("N", "Initial State"),
                            ("I", "In Progress"),
                            ("R", "Ready"),
                        ],
                        max_length=1,
                    ),
                ),
                ("bedroom_hall_kitchen", models.IntegerField(default=0)),
                ("land_area", models.FloatField(default=0.0)),
                ("build_up_area", models.FloatField(default=0.0)),
                ("address", models.TextField()),
                (
                    "price",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                (
                    "condition_type",
                    models.CharField(
                        choices=[("N", "New"), ("U", "Used")], max_length=1
                    ),
                ),
                ("bedrooms", models.IntegerField(default=0)),
                ("bathrooms", models.IntegerField(default=0)),
                ("available_from", models.DateField(blank=True, null=True)),
                ("city", models.CharField(blank=True, max_length=63, null=True)),
                (
                    "available_for",
                    models.CharField(
                        choices=[("R", "Rent"), ("S", "Sale")], max_length=1
                    ),
                ),
                ("storey", models.IntegerField(default=1)),
                ("parking", models.IntegerField(default=0)),
                ("attached_bathroom", models.IntegerField(default=0)),
                (
                    "facing",
                    models.CharField(
                        choices=[
                            ("E", "EAST"),
                            ("W", "WEST"),
                            ("N", "North"),
                            ("S", "South"),
                        ],
                        max_length=1,
                    ),
                ),
                (
                    "property_type",
                    models.CharField(
                        choices=[("H", "House"), ("L", "Land"), ("F", "Flat")],
                        max_length=1,
                    ),
                ),
                ("furnished", models.BooleanField(default=False)),
                ("available", models.BooleanField(default=False)),
                ("added_at", models.DateTimeField(auto_now_add=True)),
                ("viewed_count", models.IntegerField(default=0)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("description", models.TextField()),
                (
                    "location",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                ("latitude", models.FloatField(blank=True, null=True)),
                ("longitude", models.FloatField(blank=True, null=True)),
                (
                    "agent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="agent_properties",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="properties",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "property_property",
                "ordering": ["-membership_plan", "-added_at"],
                "permissions": [("has_agent_permission", "Can Show Property")],
                "get_latest_by": ["-membership_plan", "-added_at"],
            },
        ),
        migrations.CreateModel(
            name="SocietyAmenities",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=32)),
                ("style_class", models.CharField(blank=True, max_length=32, null=True)),
            ],
            options={
                "db_table": "property_society_amenities",
            },
        ),
        migrations.CreateModel(
            name="PropertyGallery",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("image", models.ImageField(upload_to="property/images")),
                (
                    "property",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="gallery",
                        to="property.property",
                    ),
                ),
            ],
            options={
                "db_table": "property_property_gallery",
            },
        ),
        migrations.CreateModel(
            name="PropertyDiscussionBoard",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "discussion",
                    models.CharField(
                        choices=[
                            ("Q", "Query"),
                            ("R", "Review"),
                            ("S", "Suggestion"),
                            ("C", "Complaint"),
                        ],
                        max_length=1,
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=32, null=True)),
                (
                    "tags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=32),
                        blank=True,
                        size=None,
                    ),
                ),
                ("comments", models.TextField()),
                (
                    "property",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="discussion",
                        to="property.property",
                    ),
                ),
            ],
            options={
                "db_table": "property_property_discussion",
            },
        ),
        migrations.AddField(
            model_name="property",
            name="society_amenities",
            field=models.ManyToManyField(
                related_name="amenities", to="property.SocietyAmenities"
            ),
        ),
        migrations.CreateModel(
            name="FieldVisit",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=64)),
                ("email", models.CharField(max_length=16)),
                ("phone", models.CharField(max_length=16)),
                (
                    "property",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="field_visits",
                        to="property.property",
                    ),
                ),
            ],
            options={
                "db_table": "property_field_visit",
                "ordering": ["name"],
            },
        ),
        migrations.AddIndex(
            model_name="property",
            index=models.Index(
                fields=["city", "condition_type"], name="property_pr_city_5e8ab3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="property",
            index=models.Index(
                fields=["city", "available_for", "condition_type"],
                name="property_pr_city_6aa31a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="property",
            index=models.Index(
                fields=["available_for", "condition_type"],
                name="property_pr_availab_3dc97d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="property",
            index=models.Index(
                fields=["city", "available_for"], name="property_pr_city_8200d1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="property",
            index=models.Index(fields=["storey"], name="storey_idx"),
        ),
        migrations.AddIndex(
            model_name="property",
            index=models.Index(fields=["parking"], name="parking_idx"),
        ),
        migrations.AddIndex(
            model_name="property",
            index=models.Index(fields=["facing"], name="facing_idx"),
        ),
    ]
